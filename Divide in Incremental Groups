Given two integers N and K, the task is to count the number of ways to divide N into groups of positive integers. Such that each group shall have K elements and their sum is N. Also the number of elements in the groups follows a non-decreasing order (i.e. group[i] <= group[i+1]). Find the number of such groups

Example 1:

Input:
N = 8
K = 4
Output:
5
Explanation:
There are 5 groups such that their sum is 8 
and the number of positive integers in each 
group is 4. The 5 groups are [1, 1, 1, 5], 
[1, 1, 2, 4], [1, 1, 3, 3], [1, 2, 2, 3] and 
[2, 2, 2, 2].


def countWaysToDivide(N, K):
    # Create a table to store the counts
    dp = [[0] * (N + 1) for _ in range(K + 1)]

    # Initialize the table
    for i in range(N + 1):
        dp[0][i] = 0
    for i in range(K + 1):
        dp[i][0] = 0

    # Fill the table using bottom-up dynamic programming
    for i in range(1, K + 1):
        for j in range(1, N + 1):
            if j < i:
                dp[i][j] = 0
            elif j == i:
                dp[i][j] = 1
            else:
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j - i]

    return dp[K][N]

# Example
N = 8
K = 4
ways = countWaysToDivide(N, K)
print(ways)  # Output: 5
